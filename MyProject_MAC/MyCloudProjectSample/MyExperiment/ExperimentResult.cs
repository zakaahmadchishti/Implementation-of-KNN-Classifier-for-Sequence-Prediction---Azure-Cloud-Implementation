
using Azure;
using Azure.Data.Tables;
using MyCloudProject.Common;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;

namespace MyExperiment
{
    /// <summary>
    /// Represents the result of an experiment, implementing both Azure TableEntity and IExperimentResult interfaces.
    /// This class is used to store and manage experiment results in Azure Table Storage and also provide an interface for experiment results.
    /// </summary>
    public class ExperimentResult : ITableEntity, IExperimentResult
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExperimentResult"/> class with the specified partition and row keys.
        /// </summary>
        /// <param name="partitionKey">The partition key for Azure Table Storage.</param>
        /// <param name="rowKey">The row key for Azure Table Storage.</param>
        public ExperimentResult(string partitionKey, string rowKey)
        {
            PartitionKey = partitionKey;
            RowKey = rowKey;
        }

        // Azure Table Storage properties
        /// <summary>
        /// Gets or sets the partition key for Azure Table Storage.
        /// </summary>
        public string PartitionKey { get; set; }

        /// <summary>
        /// Gets or sets the row key for Azure Table Storage.
        /// </summary>
        public string RowKey { get; set; }

        /// <summary>
        /// Gets or sets the timestamp for the entity in Azure Table Storage.
        /// </summary>
        public DateTimeOffset? Timestamp { get; set; }

        /// <summary>
        /// Gets or sets the ETag for the entity in Azure Table Storage.
        /// </summary>
        public ETag ETag { get; set; }

        // Experiment result information
        /// <summary>
        /// Gets or sets the unique identifier for the experiment.
        /// </summary>
        public string ExperimentId { get; set; }

        /// <summary>
        /// Gets or sets the name of the experiment.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the description of the experiment.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the start time of the experiment in UTC.
        /// </summary>
        public DateTime? StartTimeUtc { get; set; }

        /// <summary>
        /// Gets or sets the end time of the experiment in UTC.
        /// </summary>
        public DateTime? EndTimeUtc { get; set; }

        private long durationSec;
        /// <summary>
        /// Gets or sets the duration of the experiment in seconds.
        /// </summary>
        public long DurationSec
        {
            get => durationSec;
            set => durationSec = value;
        }

        /// <summary>
        /// Gets or sets the URL of the training file used in the experiment.
        /// </summary>
        public string TrainingFileUrl { get; set; }

        /// <summary>
        /// Gets or sets the URL of the testing file used in the experiment.
        /// </summary>
        public string TestingFileUrl { get; set; }

        /// <summary>
        /// Gets or sets the comma-separated list of output files generated by the experiment.
        /// </summary>
        public string OutputFiles { get; set; }

        /// <summary>
        /// Gets or sets the list of predicted labels from the experiment.
        /// </summary>
        public List<string> predictedLabels { get; set; }

        private float accuracy;
        /// <summary>
        /// Gets or sets the accuracy of the experiment result.
        /// </summary>
        public float Accuracy
        {
            get => accuracy;
            set => accuracy = value;
        }

        // Property to serialize and deserialize output files as an array of strings.
        /// <summary>
        /// Gets or sets the output files as an array of strings, serialized into a comma-separated string.
        /// </summary>
        [IgnoreDataMember]
        public string[] OutputFilesProxy
        {
            get => OutputFiles?.Split(',') ?? Array.Empty<string>();
            set => OutputFiles = value != null ? string.Join(",", value) : null;
        }

        // Explicit interface implementation for IExperimentResult properties
        string IExperimentResult.ExperimentId
        {
            get => ExperimentId;
            set => ExperimentId = value;
        }

        string IExperimentResult.TrainingFileUrl
        {
            get => TrainingFileUrl;
            set => TrainingFileUrl = value;
        }

        string IExperimentResult.TestingFileUrl
        {
            get => TestingFileUrl;
            set => TestingFileUrl = value;
        }

        DateTime? IExperimentResult.StartTimeUtc
        {
            get => StartTimeUtc;
            set => StartTimeUtc = value;
        }

        DateTime? IExperimentResult.EndTimeUtc
        {
            get => EndTimeUtc;
            set => EndTimeUtc = value;
        }

        TimeSpan IExperimentResult.Duration
        {
            get => TimeSpan.FromSeconds(DurationSec);
            set => DurationSec = (long)value.TotalSeconds;
        }

        double? IExperimentResult.Accuracy
        {
            get => (double?)Accuracy;
            set => Accuracy = (float)(value ?? 0);
        }

        DateTime? IExperimentResult.Timestamp
        {
            get => Timestamp?.UtcDateTime;
            set => Timestamp = value.HasValue ? new DateTimeOffset(value.Value) : (DateTimeOffset?)null;
        }

        TimeSpan? IExperimentResult.ElapsedTime
        {
            get => throw new NotImplementedException();
            set => throw new NotImplementedException();
        }

        double? IExperimentResult.DurationSec
        {
            get => durationSec;
            set => durationSec = value.HasValue ? (long)value.Value : 0;
        }

        string IExperimentResult.OutputFilesProxy
        {
            get => string.Join(",", OutputFilesProxy);
            set => OutputFilesProxy = value?.Split(',') ?? Array.Empty<string>();
        }

        // Additional properties specific to the experiment result
        /// <summary>
        /// Gets or sets the location of the output folder.
        /// </summary>
        public string OutputFolderLocation { get; set; }

        /// <summary>
        /// Gets or sets the location of the output table.
        /// </summary>
        public string OutputTableLocation { get; set; }

        /// <summary>
        /// Gets or sets the elapsed time of the experiment.
        /// This property is not implemented and will throw a <see cref="NotImplementedException"/> if accessed.
        /// </summary>
        public TimeSpan? ElapsedTime
        {
            get => throw new NotImplementedException();
            set => throw new NotImplementedException();
        }
    }
}
